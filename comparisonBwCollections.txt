Comparitive analysis of different collections used:
Set, List and Map are three important interface of Java collection framework. 
1) List in Java provides ordered and indexed collection which may contain duplicates.
2) Set provides an un-ordered  collection of unique objects, i.e. Set doesn't allow duplicates.
3) Map provides a data structure based on key value pair and hashing.
Set vs List vs Map in Java:
1) Main difference between List and Set interface in Java is that List allows duplicates while Set doesn't allow duplicates. Map  holds two object per Entry e.g. key and value and It may contain duplicate values but keys are always unique.
2) Another key difference between List and Set is that List is an ordered collection, List's contract maintains insertion order or element. Set is an unordered collection, you get no guarantee on which order element will be stored. Though some of the Set implementation e.g. LinkedHashSet, sorted set maintains order.
3) List allows null elements and you can have many null objects in a List, because it also allowed duplicates. Set just allow one null element as there is no duplicate permitted while in Map you can have null values and at most one null key. worth noting is that Hashtable doesn't allow null key or values but HashMap allows null values and one null keys.
4) Most popular implementations of List interface in Java are ArrayList, LinkedList and Vector class-	ArrayList is more general purpose and provides random access with index, while LinkedList is more suitable for frequently adding and removing elements from List. Vector is synchronized counterpart of ArrayList. 
On the other hand, most popular implementations of Set interface are HashSet, LinkedHashSet and TreeSet-		HashSet is general purpose Set which is backed by HashMap. It also doesn't provide any ordering guarantee, but LinkedHashSet does provides ordering along with uniqueness offered by Set interface. TreeSet is also an implementation of SortedSet interface, hence it keep elements in a sorted order specified by compare() or compareTo() method.
Most popular implementation of Map interface are HashMap, LinkedHashMap, Hashtable and TreeMap-	 HashMap is the non synchronized general purpose Map implementation, while Hashtable is its synchronized counterpart, both doesn' provide any ordering guarantee which comes from LinkedHashMap. Just like TreeSet, TreeMap is also a sorted data structure and keeps keys in sorted order.
When to use List, Set and Map in Java?:
1) If you need to access elements frequently by using index, than List is a way to go. Its implementation e.g. ArrayList provides faster access if you know index.
2) If you want to store elements and want them to maintain an order on which they are inserted into collection then go for List again, as List is an ordered collection and maintain insertion order.
3) If you want to create collection of unique elements and don't want any duplicate than choose any Set implementation e.g. HashSet, LinkedHashSet or TreeSet. All Set implementation follow there general contract e.g. uniqueness but also add addition feature e.g. TreeSet is a SortedSet and elements stored on TreeSet can be sorted by using Comparator or Comparable in Java. LinkedHashSet also maintains insertion order.
4) If you store data in form of key and value than Map is the way to go. You can choose from Hashtable, HashMap, TreeMap based upon your subsequent need.
